# sample estimate if there were no missing values
rox(xi, yi)
# repeat sampling many times to show the variability
re = replicate(1000,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = y[i]
# values below th are missing
xh[xh<th] = NA
c(dh = unname(rox(xh, yi)$stats["d"]),
d = unname(rox(xi, yi)$stats["d"]))
})
# expected estimates with and without missing values
c(d0 = d0$concordance, rowMeans(re) )
plot(density(re["d",],width = 0.02), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh",],width = 0.02))
abline(v = rowMeans(re), col = 1:2, lty = 3:4)
abline(v = d0$concordance, col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
# population size
N = 1e4
# let y be an outcome of interest
y = rnorm(N)
# let z be a covariate of interest
z = rnorm(N)
# let x be a metabolite measurement
x = y + z + rnorm(N)
fit0 = rox_fit(x, data.frame(y,z))
fit0
sqrt(exp)
sqrt(exp(1))
exp(1)
exp(1.229)
# let x be a metabolite measurement
x = y + 2*z + 2*rnorm(N)
fit0 = rox_fit(x, data.frame(y,z))
fit0
fit0
n = 400
# a sample from the population
i = sample(N, n)
xi = x[i]
yi = y[i]
zi = z[i]
# values below th are missing
xh = xi
xh[xh<th] = NA
rox_fit(xh, data.frame(y=yi, z=zi))
# rox: estimates the concordance with missing values
rox_fit(xh, data.frame(y=yi, z=zi))
# sample estimate if there were no missing values
rox_fit(xi, data.frame(y=yi, z=zi))
rox_fit(xh, data.frame(y=yi, z=zi))$stats
rox_fit(xh, data.frame(y=yi, z=zi)) %>% names
library(magrittr)
rox_fit(xh, data.frame(y=yi, z=zi)) %>% names
rox_fit(xh, data.frame(y=yi, z=zi))$stats_model
rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"N"]
rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"]
# repeat sampling many times to show the variability
re = replicate(100,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = y[i]
zi = y[i]
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
# repeat sampling many times to show the variability
re = replicate(100,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
re
t(re)
re["dh.y",]
plot( re["d.y",],re["dh.y",] )
abline(0,1, col = "red")
plot(density(re["d.y",],width = 0.002), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.002))
plot(density(re["d.y",],width = 0.02), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.02))
plot(density(re["d.y",],width = 0.2), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.2))
plot(density(re["d.y",],width = 0.05), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.05))
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.08))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.1))
# repeat sampling many times to show the variability
re = replicate(1000,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "concordance", main = "")
lines(density(re["dh.y",],width = 0.1))
# repeat sampling many times to show the variability
re = replicate(200,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
# repeat sampling many times to show the variability
re = replicate(300,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
rowMeans(re[c("dh.y", "d.y"),])
apply(re[c("dh.y", "d.y"),],1,median)
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = apply(re[c("dh.y", "d.y"),],1,median), col = 1:2, lty = 3:4)
plot(density(re["d.y",],width = 0.09), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.09))
abline(v = apply(re[c("dh.y", "d.y"),],1,median), col = 1:2, lty = 3:4)
plot(density(re["d.y",],width = 0.05), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.05))
abline(v = apply(re[c("dh.y", "d.y"),],1,median), col = 1:2, lty = 3:4)
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.08))
abline(v = apply(re[c("dh.y", "d.y"),],1,median), col = 1:2, lty = 3:4)
abline(v = d0$concordance, col = "blue")
fit0$stats_model[,"B"]
fit0$stats_model["y","B"]
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.08))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
boxplot(re[c("dh.y", "d.y"),])
boxplot(re[c("dh.y", "d.y"),] %>% t)
boxplot(re[c("dh.y", "d.y"),] %>% t, notch = T)
boxplot(re[c("dh.y", "d.y"),] %>% t, notch = T)
abline(h = fit0$stats_model["y","B"], col = "blue")
boxplot(re[c("dh.z", "d.z"),] %>% t, notch = T)
abline(h = fit0$stats_model["y","B"], col = "blue")
abline(h = fit0$stats_model["z","B"], col = "blue")
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.08))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.08), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.08))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.08))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.1), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.1))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.08), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.08))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
# population size
N = 1e4
n = 400
# let y be an outcome of interest
y = rnorm(N)
# let z be a covariate of interest
z = rnorm(N)
# let x be a metabolite measurement
x = y + 2*z + 2*rnorm(N)
th = -0.1
fit0 = rox_fit(x, data.frame(y,z))
fit0
# a sample from the population
i = sample(N, n)
xi = x[i]
yi = y[i]
zi = z[i]
# values below th are missing
xh = xi
xh[xh<th] = NA
# rox: estimates the concordance with missing values
rox_fit(xh, data.frame(y=yi, z=zi))
# sample estimate if there were no missing values
rox_fit(xi, data.frame(y=yi, z=zi))
# repeat sampling many times to show the variability
re = replicate(300,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
plot( re["d.y",],re["dh.y",] )
abline(0,1, col = "red")
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
table(is.na(x))
sum(x< -0.05)
sum(x< -0.1)
sum(x< -0.2)
sum(x< -0.5)
sum(x< -0.8)
sum(x< -0.9)
sum(x< -1)
# population size
N = 1e4
n = 200
# let y be an outcome of interest
y = rnorm(N)
# let z be a covariate of interest
z = rnorm(N)
# let x be a metabolite measurement
x = y + 2*z + 2*rnorm(N)
th = -1
fit0 = rox_fit(x, data.frame(y,z))
fit0
# a sample from the population
i = sample(N, n)
xi = x[i]
yi = y[i]
zi = z[i]
# values below th are missing
xh = xi
xh[xh<th] = NA
# rox: estimates the concordance with missing values
rox_fit(xh, data.frame(y=yi, z=zi))
# sample estimate if there were no missing values
rox_fit(xi, data.frame(y=yi, z=zi))
# repeat sampling many times to show the variability
re = replicate(1000,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
plot( re["d.y",],re["dh.y",] )
abline(0,1, col = "red")
# population size
N = 1e4
n = 200
# let y be an outcome of interest
y = rnorm(N)
# let z be a covariate of interest
z = rnorm(N)
# let x be a metabolite measurement
x = y + 2*z + rnorm(N)
fit0 = rox_fit(x, data.frame(y,z))
fit0
# a sample from the population
i = sample(N, n)
xi = x[i]
yi = y[i]
zi = z[i]
# values below th are missing
xh = xi
xh[xh<th] = NA
# rox: estimates the concordance with missing values
rox_fit(xh, data.frame(y=yi, z=zi))
# sample estimate if there were no missing values
rox_fit(xi, data.frame(y=yi, z=zi))
# repeat sampling many times to show the variability
re = replicate(1000,{
# a sample from the population
i = sample(N, n)
xi <- xh <- x[i]
yi = scale(y[i])
zi = scale(z[i])
# values below th are missing
xh[xh<th] = NA
c(dh = rox_fit(xh, data.frame(y=yi, z=zi))$stats_model[,"B"],
d = rox_fit(xi, data.frame(y=yi, z=zi))$stats_model[,"B"])
})
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.1), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.1))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.2), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.2))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
plot( re["d.y",],re["dh.y",] )
abline(0,1, col = "red")
par(mfrow = c(1,2))
plot(density(re["d.y",],width = 0.2), col = 2,
xlab = "beta_y", main = "")
lines(density(re["dh.y",],width = 0.2))
abline(v = rowMeans(re[c("dh.y", "d.y"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["y","B"], col = "blue")
plot(density(re["d.z",],width = 0.4), col = 2,
xlab = "beta_z", main = "")
lines(density(re["dh.z",],width = 0.4))
abline(v = rowMeans(re[c("dh.z", "d.z"),]), col = 1:2, lty = 3:4)
abline(v = fit0$stats_model["z","B"], col = "blue")
legend(x = "topright", bty = "n",
legend = c("rox estimate", "sample estimate", "ground truth"),
lty = c(3, 4, 1),
col = c(1, 2, "blue"),
lwd = 2)
fit0$stats_model[,"B"]
rox(xh, yi)
rox(xh, yi)$stats
rox(xh, yi)$stats["d"]
c(`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"]))
rbind(
`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"]))
data.table::data.table(
`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"]))
data.table::data.table(
`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"])
)
data.table::data.table(
`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"])
) %>% print
rbind(
`ground truth:` = unname(d0$concordance),
`rox estimate:` = unname(rox(xh, yi)$stats["d"]),
`sample estimate` = unname(rox(xi, yi)$stats["d"]))
aa = rox_fit(xh, data.frame(y=yi, z=zi))
aa$stats_model
aa$stats_overall
rox_fit
rox
qnorm(1.7)
qnorm(0.05)
dnorm(0.05)
dnorm(1.65)
dnorm(1.9)
dnorm(1.6)
dnorm(1.96)
dnorm(1.97)
dnorm(1.98)
dnorm(4)
dnorm(3)
dnorm(3* sqrt(4))
dnorm(3* sqrt(2))
plot( dnorm(seq(0,10, by = 0.01))
plot( dnorm(seq(0,10, by = 0.01)))
plot( dnorm(seq(0,10, by = 0.01)), dnorm(seq(0,10, by = 0.01)*sqrt(2)) )
plot( dnorm(seq(0,10, by = 0.01)), dnorm(seq(0,10, by = 0.01)*sqrt(2)) )
abline(0, b = sqrt(2))
abline(0, b = 1/sqrt(2))
plot( dnorm(seq(0,10, by = 0.01)), dnorm(seq(0,10, by = 0.01)*sqrt(2)), log = "xy")
plot( dnorm(seq(0,10, by = 0.01))/dnorm(seq(0,10, by = 0.01)*sqrt(2)), log = "xy")
